/*
 * PLAYER.c
 *
 *  Created on: 12/7/2018
 *      Author: tomh6
 */
#include "player.h"
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include "IR_driver.h"
#include "SysTick.h"
#include "SDHC.h"

//WAV file HEADER:
#define RIFF				0 //"RIFF" chunk descriptor 4 bytes from 0 to 3. big endian.
#define F_SIZE				4 //Total file size -8 bytes. 4 bytes from 4 to 7 little endian.
#define FORMAT				8 //File format, contains the letter "WAVE" for WAV files, 4 bytes from 8 to 11. big endian.
#define FTM					12//contains the letters "ftm ", 4 bytes from 12 to 15. big endian.
#define FORMAT_INFO_SIZE 	16//size of format info block, 4 bytes from 16 to 19. little endian.
#define F_TYPE				20//Type of format (1 is PCM, other values indicates some form of compression), 2 byte interger.little endian.
#define NUM_CHANNELS		22// Number of channels Mono = 1, Stereo = 2, etc. 22/23. little endian.
#define SAMPLE_RATE			24// Sample rate 4 bytes from 24 to 27. little endian.
#define BYTE_RATE			28// Byte rate =  Sample_rate*Num_Channels*BitsPerSample/8, 4 bytes 28 to 31. little endian.
#define BLOCK_ALING			32// Number of bytes per sample including all channels =NUM_CHANNELS * BitsPerSample/8. 2 bytes 32/33. little endian.
#define BITS_PER_SAMPLE		34// 8 bits = 8, 16 bits = 16, 34/35, little endian.
#define DATA				36// Here should appear the word "DATA" big endian, if the 4 bytes are different from DATA read the next four and advance that number of bytes trying to find "DATA"
#define DATA_SIZE			40// Size of the data we want to read. 40 to 43, in 44 the samples should start.
#define DATA_START			44
//END HEADER directory.

bool player_init();
void play_isr();
static bool player_play(int16_t song_number);
static bool player_pause();
static bool player_stop();
static bool player_forward();
static bool player_backward();
static bool player_next();
static bool player_previous();
static bool player_volume_up();
static bool player_volume_down();
bool player_command(uint16_t command);

/*typedef struct {

  unsigned long sector_start;
  unsigned long sector_end;
  bool is_16_bit_resolution; // FALSE INDICATE 8 BIT RESOLUTION
  uint32_t sampling_rate;
  uint16_t samples_start;

}song_structure;*/

static const int16_t max_volume_reduction[] = {8, 16};

static song_structure current_song;
static int16_t current_song_number = 0;

static int8_t volume_reduction = 0; // 0 - 7
static bool player_running;
static unsigned int ISR_index;

song_structure get_Song_data(unsigned long sector_start){
	song_structure songX = {0,0,0,0};
	unsigned char sector1[512];
	SDHC_sector_read(sector1,sector_start);
	songX.sector_start = sector_start;

	uint32_t file_size = 0;
	uint32_t data_string = 0;

	for(uint i=0;i<sizeof(uint32_t);++i){ //levanto los datos de 4 bytes
		const uint8_t bit_shifts = ( sizeof(uint32_t)-1-i ) * 8;
		file_size |= (uint32_t)sector1[F_SIZE+3 - i] << bit_shifts; //empiezo por el byte 7 y lo shifteo por ser little endian

		songX.sampling_rate |= (uint32_t)sector1[SAMPLE_RATE+3 - i] << bit_shifts; //empiezo por el byte 27 y lo shifteo por ser little endian

		data_string |= (uint32_t)sector1[DATA+i] << bit_shifts;	//este en big endian
	}
	songX.sector_end = sector_start + (file_size+8)/512;	//-1?		//veo cual es el ultimo sector que tengo que leer.

	if (sector1[BITS_PER_SAMPLE] == 16){
		songX.is_16_bit_resolution = true;
	}

	uint32_t data_offset =0;
	if(data_string != 0x64617461){	//	distinto a "data"
		for(unsigned int i=0;i<sizeof(uint32_t);++i){
			const uint8_t bit_shifts = ( sizeof(uint32_t)-1-i ) * 8;
			data_offset |= (uint32_t)sector1[DATA_SIZE +3 -i] << bit_shifts;
		}
		for(unsigned int i=0;i<sizeof(uint32_t);++i){
			const uint8_t bit_shifts = ( sizeof(uint32_t)-1-i ) * 8;
			data_string |= (uint32_t)sector1[DATA_START+data_offset+i] << bit_shifts;
		}

	}
	songX.samples_start = DATA_START + data_offset + (DATA_START-DATA);
	return songX;

}
bool player_init(){
	ISR_index = registerCallback(&play_isr,1); //el uno es porque en principio uso la frecuencia del sistema, despues con player_play() le cargo la frecuencia de sample correspondiente.
	current_song = get_Song_data(current_song.sector_start);
	//armar estructura de cada cancion según header de WAV
//current_song.sector_start -> este se puede hardcodear porque no tenemos un interprete de FAT.
//current_song.sector_end
//current_song.is_16_bit_resolution
//current_song.sampling_rate
//	player_play();
	player_running = true;
}

void play_isr(){
	if(infrared_is_data_ready()){	//esto se podria hacer con un ISR distinto o saltear el if algunos ciclos porque no tiene que ser tan rapido como la reproduccion de los samples.
		player_command(infrared_read_data());
	}
	if(player_running){
		//cargar sample
		//si es la ultima del sector cargar el proximo sector
		//si termino la canción cargar la próxima
		//enviar sample actual al DAC
	}
}


/*static bool player_play(uint16_t song_number){ //Se debe llamar cuando inicia una nueva cancion
	current_song_number = song_number;
//	SDHC_sector_read(sector, current_song.sector_start);
	setCallback_Freq(ISR_index, current_song.sampling_rate);
}*/
static bool player_pause(){
	player_running = false;
	//deshabilitar el avance, puede ser deshabilitando el ISR
}
static bool player_stop(){
	player_pause();
	current_song_number = 0;
	//restart;
}
static bool player_forward(){
	//adelantar un par de samples
	//sample += 10;
}
static bool player_backward(){
	//retrasar un par de samples
	//sample -= 10;
}

static bool player_next(){
  if((++current_song_number) >= NUMBER_OF_SONGS){
    current_song_number = 0;
  }
//  player_play();
  return true;
}

static bool player_previous(){
  if((--current_song_number) < 0){
    current_song_number = NUMBER_OF_SONGS - 1;
  }
//  player_play();
  return true;
}
static bool player_volume_up(){
  if((--volume_reduction) < 0){
    volume_reduction = 0;
  }
  return true;
}

static bool player_volume_down(){
  if((++volume_reduction) > max_volume_reduction[current_song.is_16_bit_resolution]){
    volume_reduction = max_volume_reduction[current_song.is_16_bit_resolution];
  }
  return true;
}

/*bool player_command(uint16_t command){
  switch (command){
    case PLAY:{
      player_play();
    }
    break;
    case PAUSE:{
      player_pause();
    }
    break;
    case STOP:{
      player_stop();
    }
    break;
    case FORWARD:{
      player_forward();
    }
    break;
    case BACKWARD:{
      player_backward();
    }
    break;
    case NEXT:{
      player_next();
    }
    break;
    case PREVIOUS:{
      player_previous();
    }
    break;
    case VOLUME_UP:{
      player_volume_up();
    }
    break;
    case VOLUME_DOWN:{
      player_volume_down();
    }
    break;
    default:{
      return false;
    }
  }
  return true;
}*/




